// Code generated by 'go generate'; DO NOT EDIT.

package kioskweb

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	moduser32 = windows.NewLazySystemDLL("user32.dll")

	procEnumWindows         = moduser32.NewProc("EnumWindows")
	procGetWindowTextW      = moduser32.NewProc("GetWindowTextW")
	procSetForegroundWindow = moduser32.NewProc("SetForegroundWindow")
)

func EnumWindows(lpEnumFunc uintptr, lParam uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procEnumWindows.Addr(), 2, uintptr(lpEnumFunc), uintptr(lParam), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func GetWindowTextW(hwnd syscall.Handle, text *uint16, nMaxCount int32) (err error) {
	r1, _, e1 := syscall.Syscall(procGetWindowTextW.Addr(), 3, uintptr(hwnd), uintptr(unsafe.Pointer(text)), uintptr(nMaxCount))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func SetForegroundWindow(hwnd syscall.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procSetForegroundWindow.Addr(), 1, uintptr(hwnd), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
